generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id
  email           String         @unique
  createdAt       DateTime       @default(now())
  username        String?        @unique
  avatar_url      String?
  favorites       Favorite[]
  reviews         Review[]
  reviewReplies   ReviewReply[]
  reviewVotes     ReviewVote[]
  triggeredEvents UserActivity[] @relation("ActivityActor")
  activities      UserActivity[] @relation("ActivityTarget")
  userBooks       UserBook[]

  achievements    UserAchievement[]
  reviewReplyVotes ReviewReplyVote[]
}

model Favorite {
  id      String   @id @default(uuid())
  userId  String
  bookId  String
  addedAt DateTime @default(now())
  book    Book     @relation(fields: [bookId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

model Book {
  id            String     @id @default(uuid())
  title         String
  author        String?
  createdAt     DateTime   @default(now())
  categories    String[]
  language      String     @default("en")
  pageCount     Int?
  publishedDate String?
  publisher     String?
  description   String?
  image         String?
  isbn          String?    @unique
  openLibraryId String     @unique
  totalRatings  Int        @default(0)
  averageRating Float      @default(0)
  favorites     Favorite[]
  reviews       Review[]
  userBooks     UserBook[]
}

model UserBook {
  id      String   @id @default(uuid())
  userId  String
  bookId  String
  rating  Int?
  comment String?
  status  String?
  addedAt DateTime @default(now())
  book    Book     @relation(fields: [bookId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

model Review {
  id               String        @id @default(uuid())
  userId           String
  bookId           String
  content          String
  recommendation   String
  containsSpoilers Boolean       @default(false)
  isPrivate        Boolean       @default(false)
  helpfulCount     Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  book             Book          @relation(fields: [bookId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  replies          ReviewReply[]
  votes            ReviewVote[]

  @@unique([userId, bookId])
  @@index([bookId, createdAt])
  @@index([bookId, recommendation])
  @@index([bookId, helpfulCount])
}

model ReviewVote {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
}

model ReviewReply {
  id        String        @id @default(uuid())
  userId    String
  reviewId  String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parentId  String?
  parent    ReviewReply?  @relation("ReplyToReply", fields: [parentId], references: [id])
  children  ReviewReply[] @relation("ReplyToReply")
  review    Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])
  reviewReplyVotes ReviewReplyVote[]
  helpfulCount Int @default(0)

  @@index([reviewId, createdAt])
  @@index([parentId])
}

model ReviewReplyVote {
  id      String       @id @default(uuid())
  userId  String
  replyId String

  user   User        @relation(fields: [userId], references: [id])
  reply  ReviewReply @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId]) 
}


model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  actorId   String?
  type      String
  reviewId  String?
  bookId    String?
  data      Json
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  actor     User?    @relation("ActivityActor", fields: [actorId], references: [id])
  user      User     @relation("ActivityTarget", fields: [userId], references: [id])
}

model Achievement {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  category     String    // e.g. "milestone", "author", "quirky"
  tier         Int?      // null for one-offs, >0 for tiered levels
  requirement  Json      // flexible condition storage (see examples below)
  createdAt    DateTime  @default(now())
  users        UserAchievement[]
}

model UserAchievement {
  id             Int          @id @default(autoincrement())
  userId         String
  achievementId  Int
  unlockedAt     DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  achievement    Achievement  @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId]) // Prevent duplicates
}

